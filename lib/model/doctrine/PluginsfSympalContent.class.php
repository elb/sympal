<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
abstract class PluginsfSympalContent extends BasesfSympalContent
{
  protected
    $_allGroupsPermissions,
    $_allEditGroupsPermissions,
    $_route,
    $_routeObject,
    $_editableSlotsExistOnPage = false,
    $_contentRouteObject = null;
  
  /**
   * Initializes a new sfSympalContent for the given type
   * 
   * @param   mixed $type Specify either the name of the content type (e.g. sfSympalPage)
   *                      or pass in a sfSympalContentType object
   * 
   * @return  sfSympalContent
   */
  public static function createNew($type)
  {
    if (is_string($type))
    {
      $typeString = $type;

      $type = Doctrine_Core::getTable('sfSympalContentType')->findOneByString($type);

      if (!$type)
      {
        throw new InvalidArgumentException(sprintf('Could not find Sympal Content Type named "%s"', $typeString));
      }
    }

    if (!$type instanceof sfSympalContentType)
    {
      throw new InvalidArgumentException(sprintf('Invalid Content Type', $type));
    }

    $name = $type->name;

    $content = new sfSympalContent();
    $content->Type = $type;
    $content->$name = new $name();

    return $content;
  }

  public function isPublished()
  {
    return $this->date_published && strtotime($this->date_published) <= time() ? true : false;
  }

  public function setEditableSlotsExistOnPage($bool)
  {
    $this->_editableSlotsExistOnPage = $bool;
  }

  public function getEditableSlotsExistOnPage()
  {
    return $this->_editableSlotsExistOnPage;
  }

  public function getModuleToRenderWith()
  {
    if ($module = $this->_get('module'))
    {
      return $module;
    } else {
      return $this->getType()->getModuleToRenderWith();
    }
  }

  public function hasCustomAction()
  {
    return ($this->_get('action') || sfSympalToolkit::moduleAndActionExists($this->getModuleToRenderWith(), $this->getCustomActionName()));
  }

  public function getCustomActionName()
  {
    if ($actionName = $this->_get('action'))
    {
      return $actionName;
    }
    else
    {
      return $this->getUnderscoredSlug();
    }
  }

  public function getUnderscoredSlug()
  {
    return str_replace('-', '_', $this->getSlug());
  }

  public function getActionToRenderWith()
  {
    if ($this->hasCustomAction())
    {
      return $this->getCustomActionName();
    }
    else
    {
      return $this->getType()->getActionToRenderWith();
    }
  }

  public function getUrl($options = array())
  {
    return sfContext::getInstance()->getController()->genUrl($this->getRoute(), $options);
  }

  public function getPubDate()
  {
    return strtotime($this->date_published);
  }

  public function getContentTypeClassName()
  {
    return $this->getType()->getName();
  }

  public function getAllEditPermissions()
  {
    return $this->getAllPermissions('EditGroups');
  }

  public function getAllPermissions($key = 'Groups')
  {
    $cacheKey = sprintf('_all%sPermissions', $key);
    if (!$this->$cacheKey)
    {
      $this->$cacheKey = array();
      foreach ($this->$key as $group)
      {
        foreach ($group->Permissions as $permission)
        {
          $this->{$cacheKey}[] = $permission->name;
        }
      }
    }
    return $this->$cacheKey;
  }

  public function __toString()
  {
    return $this->getHeaderTitle();
  }

  /**
   * @todo make this work nicely again with the menu hierarchu
   */
  public function getIndented()
  {
    return (string) $this;
  }

  public function getTitle()
  {
    return $this->getHeaderTitle();
  }

  public function getRecord()
  {
    if ($this['Type']['name'])
    {
      Doctrine_Core::initializeModels(array($this['Type']['name']));

      return $this[$this['Type']['name']];
    }
    else
    {
      return false;
    }
  }

  public function publish()
  {
    $this->date_published = new Doctrine_Expression('NOW()');
    $this->save();
    $this->refresh();
  }

  public function unpublish()
  {
    $this->date_published = null;
    $this->save();
  }

  public function getHeaderTitle()
  {
    if ($record = $this->getRecord())
    {
      $guesses = array('name',
                       'title',
                       'username',
                       'subject');

      // we try to guess a column which would give a good description of the object
      foreach ($guesses as $descriptionColumn)
      {
        try
        {
          return (string) $record->get($descriptionColumn);
        } catch (Exception $e) {}
      }
      return (string) $this;
    }

    return sprintf('No description for object of class "%s"', $this->getTable()->getComponentName());
  }

  public function getEditRoute()
  {
    if ($this->exists())
    {
      return '@sympal_content_edit?id='.$this['id'];
    } else {
      throw new sfException('You cannot get the edit route of a object that does not exist.');
    }
  }

  public function getFeedDescriptionPotentialSlots()
  {
    return array(
      'body'
    );
  }

  public function getFeedDescription()
  {
    if (method_exists($this->getContentTypeClassName(), 'getFeedDescription'))
    {
      return $this->getRecord()->getFeedDescription();
    }

    $slot = false;
    foreach ($this->getFeedDescriptionPotentialSlots() as $slotName)
    {
      if ($this->hasSlot($slotName))
      {
        $slot = $this->getSlot($slotName);
        break;
      }
    }

    if ($slot === false && $this->Slots->count() > 0)
    {
      $slot = $this->Slots->getFirst();
    }

    if ($slot instanceof sfSympalContentSlot)
    {
      $slot->setContentRenderedFor($this);

      return $slot->render();
    }
    else
    {
      return (string) $this;
    }
  }

  public function getTeaser()
  {
    use_helper('Text');
    return truncate_text(strip_tags($this->getFeedDescription()), 200);
  }

  public function getFormatData($format)
  {
    $method = 'get'.ucfirst($format).'FormatData';
    if (method_exists($this->getContentTypeClassName(), $method))
    {
      return $this->getRecord()->$method();
    } else if (method_exists($this, $method)) {
      $data = $this->$method();
    } else {
      $data = $this->getDefaultFormatData();
    }
    return Doctrine_Parser::dump($this->$method(), $format);
  }

  public function getDefaultFormatData()
  {
    $data = $this->toArray(true);
    unset(
      $data['Groups'],
      $data['Links'],
      $data['Assets'],
      $data['CreatedBy'],
      $data['Site']
    );

    return $data;
  }

  public function getXmlFormatData()
  {
    return $this->getDefaultFormatData();
  }

  public function getYmlFormatData()
  {
    return $this->getDefaultFormatData();
  }

  public function getJsonFormatData()
  {
    return $this->getDefaultFormatData();
  }

  public function getIsPublished()
  {
    return ($this->getDatePublished() && strtotime($this->getDatePublished()) <= time()) ? true : false;
  }

  public function getIsPublishedInTheFuture()
  {
    return ($this->getDatePublished() && strtotime($this->getDatePublished()) > time()) ? true : false;
  }

  public function getMonthPublished($format = 'm')
  {
    return date('m', strtotime($this->getDatePublished()));
  }

  public function getDayPublished()
  {
    return date('d', strtotime($this->getDatePublished()));
  }

  public function getYearPublished()
  {
    return date('Y', strtotime($this->getDatePublished()));
  }

  public function getAuthorName()
  {
    return $this->getCreatedById() ? $this->getCreatedBy()->getName() : null;
  }

  public function getAuthorEmail()
  {
    return $this->getCreatedById() ? $this->getCreatedBy()->getEmailAddress() : null;
  }

  /**
   * @return bool
   */
  public function hasCustomPath()
  {
    return $this->custom_path ? true : false;
  }

  public function getContentRouteObject()
  {
    if (!$this->_contentRouteObject)
    {
      $this->_contentRouteObject = new sfSympalContentRouteObject($this);
    }
    return $this->_contentRouteObject;
  }

  public function getRoute()
  {
    return $this->getContentRouteObject()->getRoute();
  }

  public function getRoutePath()
  {
    return $this->getContentRouteObject()->getRoutePath();
  }

  public function getRouteName()
  {
    return $this->getContentRouteObject()->getRouteName();
  }

  public function getRouteObject()
  {
    return $this->getContentRouteObject()->getRouteObject();
  }

  public function getEvaluatedRoutePath()
  {
    return $this->getContentRouteObject()->getEvaluatedRoutePath();
  }

  /**
   * Used by Sluggable to create the slug for this record
   *
   * @static
   * @param  string $text The text to slug
   * @param  sfSympalContent $content
   * @return string
   */
  public static function slugBuilder($text, sfSympalContent $content)
  {
    if ($record = $content->getRecord())
    {
      try
      {
        return $record->slugBuilder($text);
      }
      catch (Doctrine_Record_UnknownPropertyException $e)
      {
        return Doctrine_Inflector::urlize($text);
      }
    }
    else
    {
      return Doctrine_Inflector::urlize($text);
    }
  }

  /**
   * This gets the correct template to render with
   * 
   * The process is this:
   *   1) Look first on the content record itself for a template "name"
   *   2) Look next on the type record for a template "name"
   * 
   * We then retrieve the actual template (module/template) by looking
   * under the "content_templates" key of the current content template's
   * configuration for the template "name".
   * 
   * If all else fails, the "default_view" template name of the current
   * content type config will be used
   */
  public function getTemplateToRenderWith()
  {
    if (!$templateName = $this->getTemplate())
    {
      $templateName = $this->getType()->getTemplate();
    }

    $templates = sfSympalConfig::getContentTemplates($this['Type']['name']);
    if (isset($templates[$templateName]))
    {
      if (!is_array($templates[$templateName]) || !isset($templates[$templateName]['template']))
      {
        throw new sfException(sprintf('Key "template" must be set under content_template "%s" in app.yml', $templateName));
      }
      $template = $templates[$templateName]['template'];
    }
    else
    {
      if (isset($templates['default_view']))
      {
        if (!is_array($templates['default_view']) || !isset($templates['default_view']['template']))
        {
          throw new sfException('Key "template" must be set under content_template "default_view" in app.yml');
        }
        $template = $templates['default_view']['template'];
      }
      else
      {
        throw new sfException(sprintf('No "default_view" template specified for "%s" content type', $this->getType()->getName()));
      }
    }

    return $template;
  }

  /**
   * Renders the theme name with which this Content should be rendered.
   * Priority is in this order
   * 
   *   * Content->theme
   *   * ContentType->theme
   *   * Site->theme
   * 
   * If none of the above are found, this Content record has no theme preference
   * 
   * @return string
   */
  public function getThemeToRenderWith()
  {
    if ($theme = $this->getTheme())
    {
      return $theme;
    }
    else if ($theme = $this->getType()->getTheme())
    {
      return $theme;
    }
    else if ($theme = $this->getSite()->getTheme())
    {
      return $theme;
    }
  }
/* @TODO put this in the search plugin
  public function disableSearchIndexUpdateForSave()
  {
    $this->_updateSearchIndex = false;
  }*/

  public function save(Doctrine_Connection $conn = null)
  {
    $result = parent::save($conn);

/*  @TODO put this in the search plugin
    if ($this->_updateSearchIndex)
    {
      sfSympalSearch::getInstance()->updateSearchIndex($this);
    }

    $this->_updateSearchIndex = true;*/

    return $result;
  }

  public function delete(Doctrine_Connection $conn = null)
  {
/*  @TODO put this back into the search plugin
    if ($this->_updateSearchIndex)
    {
      $index = sfSympalSearch::getInstance()->getIndex();
      foreach ($index->find('pk:'.$this->getId()) as $hit)
      {
        $index->delete($hit->id);
      }
    }*/

    // delete content from accociated content type table
    Doctrine_Core::getTable($this->getType()->getName())
      ->findOneByContentId($this->getId())
      ->delete()
    ;
    
    return parent::delete($conn);
  }

/* @TODO put this back in the search plugin
  public function getSearchData()
  {
    $searchData = array();
    $clone = clone $this;
    $data = $clone->toArray(false);
    if ($data)
    {
      foreach ($data as $key => $value)
      {
        if (is_scalar($value))
        {
          $searchData[$key] = $value;
        }
      }
    }
    $data = $clone->getRecord()->toArray(false);
    if ($data)
    {
      foreach ($data as $key => $value)
      {
        if (is_scalar($value))
        {
          $searchData[$key] = $value;
        }
      }
    }
    foreach ($this->getSlots() as $slot)
    {
      $slot->setContentRenderedFor($this);
      $searchData[$slot->getName()] = $slot->getValue();
    }
    return $searchData;
  }*/
  
  /**
   * Used by sfSympalContentSlot to render the created_at_id slot value
   * 
   * @see sfSympalContentSlot::getValueForRendering()
   * @return string
   */
  public function getCreatedByIdSlotValue(sfSympalContentSlot $slot)
  {
    return $this->created_by_id ? $this->CreatedBy->username : 'nobody';
  }
  
  /**
   * Used by sfSympalContentSlot to render the date_published slot value
   * 
   * @see sfSympalContentSlot::getValueForRendering()
   * @return string
   */
  public function getDatePublishedSlotValue(sfSympalContentSlot $slot)
  {
    if ($this->date_published)
    {
      sfApplicationConfiguration::loadHelpers('Date');

      return format_datetime($this->date_published, sfSympalConfig::get('date_published_format'));
    }
    else
    {
      return 'unpublished';
    }
  }
}